#!/usr/bin/env bash

BUILDPACK_DIR="${BUILDPACK_DIR:-$(pwd)}"

test_get_jdk_version() {
  local build_dir="$(mktemp -d)"
  echo "java.runtime.version=1.8" > "${build_dir}/system.properties"
  assertEquals "1.8" "$(get_jdk_version "$build_dir")"
}

test_get_jdk_version_spaces() {
  local build_dir="$(mktemp -d)"
  echo "java.runtime.version = 11  " > "${build_dir}/system.properties"
  assertEquals "11" "$(get_jdk_version "$build_dir")"
}

test_get_jdk_version_newline() {
  local build_dir="$(mktemp -d)"
  cat <<EOF > "${build_dir}/system.properties"
java.runtime.version=11
maven.version=3.5.4
EOF
  assertEquals "11" "$(get_jdk_version "$build_dir")"
}

test_get_jdk_version_8_222() {
  local build_dir="$(mktemp -d)"
  echo "java.runtime.version=1.8.0_222" > "${build_dir}/system.properties"
  assertEquals "1.8.0_222" "$(get_jdk_version "$build_dir")"
}

test_get_jdk_version_11() {
  local build_dir="$(mktemp -d)"
  echo "java.runtime.version=11" > "${build_dir}/system.properties"
  assertEquals "11" "$(get_jdk_version "$build_dir")"
}

test_get_jdk_version_11_0_4() {
  local build_dir="$(mktemp -d)"
  echo "java.runtime.version=11.0.4" > "${build_dir}/system.properties"
  assertEquals "11.0.4" "$(get_jdk_version "$build_dir")"
}

test_get_jdk_version_zulu() {
  local build_dir="$(mktemp -d)"
  echo "java.runtime.version=zulu-1.8.0_212" > "${build_dir}/system.properties"
  assertEquals "zulu-1.8.0_212" "$(get_jdk_version "$build_dir")"
}

test_get_jdk_url() {
  assertEquals "${JDK_URL_1_8:?}" "$(get_jdk_url "")"
  assertEquals "${JDK_URL_1_7:?}" "$(get_jdk_url "1.7")"
  assertEquals "${JDK_URL_1_8:?}" "$(get_jdk_url "1.8")"
  assertEquals "${JDK_URL_1_9:?}" "$(get_jdk_url "9")"
  assertEquals "${JDK_URL_11:?}" "$(get_jdk_url "11")"
  assertEquals "https://lang-jvm.s3.amazonaws.com/jdk/heroku-18/openjdk1.7.0_192.tar.gz" "$(get_jdk_url "1.7.0_192")"
  assertEquals "https://lang-jvm.s3.amazonaws.com/jdk/heroku-18/openjdk1.8.0_222.tar.gz" "$(get_jdk_url "1.8.0_222")"
  assertEquals "https://lang-jvm.s3.amazonaws.com/jdk/heroku-18/openjdk1.8.0_191.tar.gz" "$(get_jdk_url "1.8.0_191")"
  assertEquals "https://lang-jvm.s3.amazonaws.com/jdk/heroku-18/openjdk11.0.0.tar.gz" "$(get_jdk_url "11.0.0")"
}

test_install_jdk_overlay() {
  local jdk_dir="$(mktemp -d)"
  local build_dir="$(mktemp -d)"
  mkdir -p ${jdk_dir}/jre/bin
  touch ${jdk_dir}/jre/bin/java
  mkdir -p ${build_dir}/.jdk-overlay/jre/lib/security
  mkdir -p ${build_dir}/.jdk-overlay/jre/bin
  touch ${build_dir}/.jdk-overlay/jre/lib/security/policy.jar
  echo "." > ${build_dir}/.jdk-overlay/jre/lib/security/cacerts
  capture install_jdk_overlay "${jdk_dir}" "${build_dir}"
  assertTrue "Files in .jdk-overlay should be copied to .jdk." "[ -f ${jdk_dir}/jre/lib/security/policy.jar ]"
  assertTrue "Files in .jdk should not be overwritten." "[ -f ${jdk_dir}/jre/bin/java ]"
}

test_install_profile() {
  unset JAVA_HOME # unsets environment -- shunit doesn't clean environment before each test
  local profileDir="$(mktemp -d)"
  capture install_profile "${BUILDPACK_DIR}" "${profileDir}"
  assertCapturedSuccess
  assertTrue "[ -f ${profileDir}/jvmcommon.sh ]"
}

testGetAppSystemProperty() {
  local buildDir="$(mktemp -d)"
  cat > ${buildDir}/app.system <<EOF
jvm.major.version=1.8
EOF
  assertEquals "1.8" "$(_get_system_property ${buildDir}/app.system "jvm.major.version")"
}

test_get_system_property_with_whitespace() {
  local buildDir="$(mktemp -d)"
  cat > ${buildDir}/app.system <<EOF

jvm.major.version    =        1.8


EOF
  assertEquals "1.8" "$(_get_system_property ${buildDir}/app.system "jvm.major.version")"
}

testGetAppSystemPropertyWithSimilarName() {
  local buildDir="$(mktemp -d)"
  cat > ${buildDir}/app.system <<EOF
jvm.major.versions=1.8
EOF
  assertEquals "" "$(_get_system_property ${buildDir}/app.system "jvm.major.version")"

}

# the modules to be tested
source "${BUILDPACK_DIR}/lib/jvm.sh"

# testing utils
source "${BUILDPACK_DIR}/test/utils"

# import the testing framework
source "${BUILDPACK_DIR}/test/shunit2"
