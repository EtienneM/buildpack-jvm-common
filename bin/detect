#!/usr/bin/env bash

get_client() {
  local propFile=$1
  local propName="client"
  local propDefault="JVM Common"

  if [ -f ${propFile} ]; then
    local propValue=$(sed '/^\#/d' ${propFile} | grep "${propName}"  | tail -n 1 | cut -d "=" -f2- | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
    echo "${propValue:-$propDefault}"
  else
    echo "$propDefault"
  fi
}

write_build_plan() {
  local plan=${1:?}
  local appDir="$(pwd)"
  local bpDir="$(cd $(dirname $0)/..; pwd)" # absolute path
  source "${bpDir}/lib/jvm.sh"

  local jdkVersion="$(get_jdk_version "${appDir}")"
  local fullJdkVersion="$(get_full_jdk_version "${jdkVersion}")"

  cat <<TOML > $plan
[[provides]]
name = "jdk"

[[requires]]
name = "jdk"
version = "$fullJdkVersion"

[[provides]]
name = "jre"

[[requires]]
name = "jre"
version = "$fullJdkVersion"
TOML
}

if [ -n "${CNB_STACK_ID:-}" ]; then
  write_build_plan "$2"
  echo "JVM"
else
  if [ -f $1/.heroku-deploy ]; then
    echo "$(get_client $1/.heroku-deploy)"
  elif [ -f $1/pom.xml ] && [ -d $1/target ]; then
    echo "heroku-maven-plugin"
  elif [ -d $1/target/universal/stage ]; then
    echo "sbt-heroku"
  elif [ -f $1/project.clj ] && [ -d $1/target ]; then
    echo "lein-heroku"
  else
    echo "JVM Common"
  fi
fi
exit 0
