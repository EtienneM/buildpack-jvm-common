#!/usr/bin/env bash

JVM_COMMON_DIR="${JVM_COMMON_DIR:-$(cd $(dirname ${BASH_SOURCE[0]}) && cd .. && pwd )}"
if [ -f "${JVM_COMMON_DIR}/lib/jvm.sh" ]; then source "${JVM_COMMON_DIR}/lib/jvm.sh"; fi

install_java_with_overlay() {
  local buildDir="${1}"
  local cacheDir="${2:-$(mktemp -d)}"
  if [ ! -f "${buildDir}/.jdk/bin/java" ]; then
    local jdkVersion=$(get_jdk_version ${buildDir})
    local jdkUrl=$(get_jdk_url "${jdkVersion}")
    _jvm_mcount "version.${jdkVersion}"
    if [[ "$jdkVersion" == *openjdk* ]]; then
      status_pending "Installing OpenJDK $(_get_openjdk_version ${jdkVersion})"
      _jvm_mcount "vendor.openjdk"
    elif [[ "$jdkVersion" == *zulu* ]]; then
      status_pending "Installing Azul Zulu JDK $(_get_zulu_version ${jdkVersion})"
      _jvm_mcount "vendor.zulu"
    else
      status_pending "Installing JDK ${jdkVersion}"
      _jvm_mcount "vendor.default"
    fi
    install_java "${buildDir}" "${jdkVersion}" "${jdkUrl}"
    install_jdk_overlay "${buildDir}/.jdk" "${buildDir}"
    _cache_version "${jdkVersion}" "${cacheDir}"
    status_done
  else
    status "Using provided JDK"
    _jvm_mcount "vendor.provided"
  fi
}

install_java() {
  local baseDir=${1?"Invalid directory to install java."}

  local jdkVersion="${2:-$DEFAULT_JDK_VERSION}"
  local jdkUrl=${3:-$(get_jdk_url "${jdkVersion}")}
  local jdkDir="${baseDir}"/.jdk
  local jdkTarball="${jdkDir}"/jdk.tar.gz
  local javaExe="${jdkDir}/bin/java"
  mkdir -p "${jdkDir}"

  if [ ! -f "${jdkTarball}" ] && [ ! -f "${javaExe}" ] || is_java_version_change "${jdkDir}" "${jdkVersion}"; then
    rm -rf "${jdkDir}"
    mkdir -p "${jdkDir}"
    validate_jdk_url ${jdkUrl} ${jdkVersion}
    curl --retry 3 --silent --show-error --location ${jdkUrl} --output ${jdkTarball}
    tar pxzf ${jdkTarball} -C "${jdkDir}"
    rm ${jdkTarball}
    install_certs "${jdkDir}"
    echo "${jdkVersion}" > "${jdkDir}/version"
    if [ ! -f "${javaExe}" ]; then
      error_return "Unable to retrieve the JDK."
      return 1
    fi
  fi
  export JAVA_HOME=${jdkDir}
  export PATH="${jdkDir}/bin:${PATH}"

  install_profile "${JVM_COMMON_DIR}" "${baseDir}/.profile.d"
  _install_tools ${baseDir}
  _create_export_script ${JAVA_HOME} "$(pwd)"
  _install_pgconfig ${JAVA_HOME}
  _install_default_proc_warn ${baseDir}
  install_metrics_agent "${JVM_COMMON_DIR}" "${baseDir}/.heroku/bin" "${baseDir}/.profile.d"
}

validate_jdk_url() {
  local jdkUrl=${1}
  local jdkVersion=${2}
  if [ "$(_get_url_status ${jdkUrl})" != "200" ]; then
    echo ""
    error_return "Unsupported Java version: $jdkVersion

Please check your system.properties file to ensure the java.runtime.version
is among the list of supported version on the Dev Center:
https://devcenter.heroku.com/articles/java-support#supported-java-versions
You can also remove the system.properties from your repo to install
the default ${DEFAULT_JDK_VERSION} version.
If you continue to have trouble, you can open a support ticket here:
https://help.heroku.com

Thanks,
Heroku"
    return 1
  fi
}

is_java_version_change() {
  jdkDir=$1
  jdkVersion=${2:-${DEFAULT_JDK_VERSION}}
  if [ ! -d "${jdkDir}" ]; then echo "Invalid JDK directory."; return 1; fi
  test -f "${jdkDir}/version" && [ "$(cat ${jdkDir}/version)" != "${jdkVersion}" ]
}

_install_tools() {
  local ctxDir=${1:-BUILD_DIR}
  local curDir=${JVM_COMMON_DIR:-$(cd $(dirname ${BASH_SOURCE[0]}) && cd .. && pwd )}

  mkdir -p $ctxDir/.heroku/bin
  mkdir -p $ctxDir/.heroku/with_jmap/bin
  cp $curDir/opt/with_jmap $ctxDir/.heroku/bin/with_jmap
  cp $curDir/opt/with_jmap_java $ctxDir/.heroku/with_jmap/bin/java
  chmod +x $ctxDir/.heroku/bin/with_jmap
  chmod +x $ctxDir/.heroku/with_jmap/bin/java

  mkdir -p $ctxDir/.heroku/with_jstack/bin
  cp $curDir/opt/with_jstack $ctxDir/.heroku/bin/with_jstack
  cp $curDir/opt/with_jstack_java $ctxDir/.heroku/with_jstack/bin/java
  chmod +x $ctxDir/.heroku/bin/with_jstack
  chmod +x $ctxDir/.heroku/with_jstack/bin/java

  mkdir -p $ctxDir/.heroku/with_jmap_and_jstack/bin
  cp $curDir/opt/with_jmap_and_jstack $ctxDir/.heroku/bin/with_jmap_and_jstack
  cp $curDir/opt/with_jmap_and_jstack_java $ctxDir/.heroku/with_jmap_and_jstack/bin/java
  chmod +x $ctxDir/.heroku/bin/with_jmap_and_jstack
  chmod +x $ctxDir/.heroku/with_jmap_and_jstack/bin/java
}

_install_default_proc_warn() {
  local ctxDir=${1:-BUILD_DIR}

  mkdir -p ${ctxDir}/.profile.d
  cat << EOF > ${ctxDir}/.profile.d/default-proc-warning.sh
if [ ! -f /app/Procfile ] && [ "\$DYNO" = "web.1" ]; then
  echo "Create a Procfile to customize the command used to run this process: https://devcenter.heroku.com/articles/procfile"
fi
EOF
}

_create_export_script() {
  local javaHome=${1:-JAVA_HOME}
  local ctxDir=${2:-CWD}

  if [ -w ${ctxDir} ]; then
    cat << EOF > ${ctxDir}/export
export JAVA_HOME=$javaHome
export PATH=\$JAVA_HOME/bin:\$PATH
export LD_LIBRARY_PATH="\$JAVA_HOME/jre/lib/amd64/server:\$LD_LIBRARY_PATH"
EOF
  fi
}

_install_pgconfig() {
  local javaHome=${1:-JAVA_HOME}
  local extDir="${javaHome}/jre/lib/ext"

  if [ -d "${extDir}" ] && [ -z "${SKIP_PGCONFIG_INSTALL:-}"  ] && [ "${CI:-}" != "true" ]; then
    curl --retry 3 -s -L "https://lang-jvm.s3.amazonaws.com/pgconfig.jar" -o ${extDir}/pgconfig.jar
  fi
}

_get_zulu_version() {
  echo "$(echo ${1} | sed -e 's/zulu-//g')"
}

_get_openjdk_version() {
  echo "$(echo ${1} | sed -e 's/openjdk-//g')"
}

_get_url_status() {
  curl --retry 3 --silent --head -w %{http_code} -L "${1}" -o /dev/null
}

_jvm_mcount() {
  if type -t mcount > /dev/null; then mcount "jvm.${1}"; fi
}

# Caching the JVM version will allow us to pin previous used defaults when
# upgrading the default JDK. That is, if an app has JDK 8 installed now
# because it's the default, it will continue to have JDK 8 installed when the
# default is upgraded to JDK 11.
_cache_version() {
  local jdkVersion="${1}"
  local cacheDir="${2}"

  if [ -d "${cacheDir}" ]; then
    echo "java.runtime.version=${jdkVersion}" > "${cacheDir}/system.properties"
  fi
}
